#!/usr/bin/env python
# -*- coding: utf-8 -*-
from flask import Flask, request
import requests
import urllib.request
import os
import PyPDF2, sys
import re

from PIL import Image
import pdf2info

import telebot
from telebot import types
import json

import nlp

def get_—Åcount_resume():
	path = '/var/www/html/pdf/'
	count = len([f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))])
	print (count)
	headers = {'Content-type': 'application/json'}
	data = { "auth_token": "YOUR_AUTH_TOKEN", "current": count}
	r = requests.post('http://gpb2.hack48.ru:3030/widgets/zayavki', data=json.dumps(data), headers=headers)
	return 0
	
def get_status_text(uid):
	a = "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Ä–µ–∑—é–º–µ. –ò –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏."
	return a

token = "1262020270:AAGejUTQb59aspZCECSVadarFADVRHztOZU"

keyboard1 = telebot.types.ReplyKeyboardMarkup()
keyboard1.row('–ü—Ä–∏–≤–µ—Ç', '–ü–æ–∫–∞')


app = Flask(__name__)

hello = ("""–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫–∞". üëæ

–¢—ã —É–∂–µ –∫—Ä—É—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª üòé? –í–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π —Ç—ã –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –±–æ–ª—å—à–æ–π –ò–¢-–∫–æ–º–∞–Ω–¥—ã! üöÄ

–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ –∏ —è –ø–æ–¥—Å–∫–∞–∂—É —Ç–µ–±–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è üî•

–ö—Å—Ç–∞—Ç–∏! –ú—ã –∞–∫—Ç–∏–≤–Ω–æ –Ω–∞–±–∏—Ä–∞–µ–º IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –∏ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–º –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π /rec –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏—è—Ç–Ω—ã–π –±–æ–Ω—É—Å üéÅ.

–°–≤–æ–π —Å—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /status üß≥ """)

status = 0

def send_message(chat_id, text):
	method = "sendMessage"
	url = "https://api.telegram.org/bot" + token + "/" + method
	data = {"chat_id": chat_id, "text": text}
	requests.post(url, data=data)
	
@app.route("/send", methods=["GET", "POST"])
def receive_update2():
	if request.method == "POST":
		print(request.json)
		chat_id = request.json["id"]
		message = request.json["message"]
		send_message(chat_id, message)
		return {"ok": True}	
			
""""			
def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1] in ALLOWED_EXTENSIONS

@app.route('/upload', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        file = request.files['file']
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            return redirect(url_for('uploaded_file',
                                    filename=filename))
"""

@app.route("/", methods=["GET", "POST"])
def receive_update():
	if request.method == "POST":
		print(request.json)
		try:
			sender = request.json["send"]
			if sender == '1':
				chat_id = request.json["id"]
				message = request.json["message"]
				send_message(chat_id, message)
				return {"ok": True}	
		except:
			print ("Not send")
		chat_id = request.json["message"]["chat"]["id"]
		#status = get_status(chat_id)
		try:
			text = (request.json["message"]["text"])
			print (text)
			if text == "/start":
				send_message(chat_id, hello)
			if text == "/status":
				send_message(chat_id, get_status_text(chat_id))
			if text == "/rec":
				send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—é–º–µ –¥—Ä—É–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF")
			if text == "/test":
				send_message(chat_id, "–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç")
				search_file = sorted(os.listdir("./all_tests"))
				print (search_file)
		except:
			print ("error text")
		try:
			file_id = request.json["message"]["document"]["file_id"]
			print (file_id)
			file_name = request.json["message"]["document"]["file_name"]
			print (file_name)
			url2pdf = "https://api.telegram.org/bot" + token + "/getFile?file_id=" + file_id
			print (url2pdf)
			r = requests.get(url2pdf)
			print (r.json())
			url2pdf2 = "https://api.telegram.org/file/bot"+token+"/"+(r.json())["result"]["file_path"]
			print (url2pdf2)
			print ("/var/www/html/pdf/"+str(chat_id)+".pdf")
			#r = requests.get(url2pdf2, allow_redirects=True)
			urllib.request.urlretrieve(url2pdf2, "/var/www/html/pdf/"+str(chat_id)+".pdf")
			print ("Downloaded")
			get_—Åcount_resume()
			top5, z = nlp._estimate(str(chat_id))
			print (top5[4][0])
			#print (r)
			#user_info = pdf2info.pdf_info(str(chat_id))
			send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–∑—é–º–µ.")
			status = 1
			#send_message(chat_id, "–í–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏. –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ—Ç–±–æ—Ä–∞.")
			reply_markup={"keyboard":[[top5[4][0]],[top5[3][0]],[top5[2][0]]],"one_time_keyboard":True}
			
			#reply_markup={"keyboard":[["Yes","No"],["Maybe"],["1","2","3"]],"one_time_keyboard":True}
			print (reply_markup)
			text = "–í–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏. –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö –¥–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ—Ç–±–æ—Ä–∞."
			text = text + "\n1. "+str(top5[4][0])
			text = text + "\n2. "+str(top5[3][0])
			text = text + "\n3. "+str(top5[2][0])
			
			data = {'chat_id': chat_id, 'text': text, 'reply_markup': json.dumps(reply_markup)}
			print (data)
			url ="https://api.telegram.org/bot" + token + "/sendMessage"
			print (url)
			r = requests.get(url, data = data)
			print (r.json())
			results = r.json()
			print (results)
		except:
			print ("Not PDF")
		send_message(chat_id, "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø—Ä–∏–º–µ—Ä /start –∏–ª–∏ /status ")
	return {"ok": True}


